version: 2.1
commands:
  cloudformation-deploy:
    parameters:
      stackName:
        type: string
        default: myStack-${CIRCLE_WORKFLOW_ID:0:5}
      path:
        type: string
    steps:
      - run:
          name: deploy Stack
          command: |
            aws cloudformation deploy \
              --stack-name <<parameters.stackName>> \
              --template-file <<parameters.path>> \
              --region=us-east-1
  rollback-infrastructure:
    steps:
      - run:
          name: Rollback Infrastructure
          command: aws cloudformation delete-stack --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5}
          when: on_fail

jobs:
  SayHello:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - run:
          name: "Say hello"
          command: "echo Hello, World!"

  DeployInfrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip
      - cloudformation-deploy:
          path: "serversConfigurations.yml"
      - run:
          name: list all public Ip Address
          command: |
            cd serverSetup &&
            echo "[all]" > inventory &&
            aws ec2 describe-instances \
              --query "Reservations[*].Instances[?Tags[?Value=='myStack-${CIRCLE_WORKFLOW_ID:0:5}']].PublicIpAddress" \
              --output text >> inventory
      - run:
          name: validate inventory has a data
          command: cat serverSetup/inventory
      - persist_to_workspace:
          root: .
          paths:
            - serverSetup/inventory
      - rollback-infrastructure


  ConfigureInfrastructure:
    docker:
      - image: cimg/python:3.10.4
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["37:4b:81:a5:f7:c3:b1:9a:62:e1:f8:af:13:ce:e2:b9"]
          # fingerprints: ["80:57:18:f7:64:b2:59:54:a7:cf:4e:b8:44:c8:46:61"]
      - attach_workspace:
          at: .
      - run:
          name: validate inventory has a data
          command: cat serverSetup/inventory
      - run: pip install ansible
      - run: cd serverSetup && ansible-playbook -i inventory main.yml
      - run:
          name: install awscli
          command: |
            pip install awscli
          when: on_fail
      - rollback-infrastructure

  SmokeTest:
    docker:
      - image: alpine:latest
    steps:
      - run: apk add --update curl
      - run:
          name: check web working well
          command: |
            URL="https://blog.udacity.com/"
            # Test if website exists
            if curl -s --head ${URL}
            then
              return 0
            else
              return 1
            fi
      - run:
          name: install awscli
          command: |
            pip install awscli
          when: on_fail
      - rollback-infrastructure

workflows:
  udacity-workflow:
    jobs:
      - SayHello
      - DeployInfrastructure
      - ConfigureInfrastructure:
          requires:
            - DeployInfrastructure
      - SmokeTest:
          requires:
            - ConfigureInfrastructure

